<?php

use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
use Drupal\wmcontent\Entity\WmContentContainer;
use Drupal\wmcontent\Field\IndexableBaseFieldDefinition;

function wmcontent_install()
{
    // Add our base fields to the schema.
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

function wmcontent_uninstall()
{
    // Remove our base fields from the schema.
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

function wmcontent_update_8001()
{
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

/**
 * Add indexes to the wmcontent_weight, wmcontent_parent,
 * wmcontent_parent_type & wmcontent_container base fields
 */
function wmcontent_update_8002()
{
    $containers = WmContentContainer::loadMultiple();
    $updateManager = \Drupal::entityDefinitionUpdateManager();
    $fieldNames = [
        'wmcontent_weight',
        'wmcontent_parent',
        'wmcontent_parent_type',
        'wmcontent_container',
    ];

    foreach ($containers as $container) {
        foreach ($fieldNames as $fieldName) {
            $storageDefinition = $updateManager->getFieldStorageDefinition(
                $fieldName,
                $container->getChildEntityType()
            );

            if (!$storageDefinition) {
                continue;
            }

            $newDefinition = IndexableBaseFieldDefinition::wrap($storageDefinition)
                ->addIndex('value');
            $updateManager->updateFieldStorageDefinition($newDefinition);
        }
    }
}

/**
 * Fix outdated entity type definitions after adding indexes
 */
function wmcontent_update_8003(array &$sandbox)
{
    $definitionUpdateManager = \Drupal::entityDefinitionUpdateManager();
    /** @var EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchema */
    $lastInstalledSchema = \Drupal::service('entity.last_installed_schema.repository');

    $entityTypeIds = array_map(
        static function (WmContentContainer $container) {
            return $container->getChildEntityType();
        },
        WmContentContainer::loadMultiple(),
    );

    foreach (array_unique($entityTypeIds) as $entityTypeId) {
        $entityType = $definitionUpdateManager->getEntityType($entityTypeId);
        $fieldStorageDefinitions = $lastInstalledSchema->getLastInstalledFieldStorageDefinitions($entityTypeId);
        $definitionUpdateManager->updateFieldableEntityType($entityType, $fieldStorageDefinitions, $sandbox);
    }
}
