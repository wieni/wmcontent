<?php

use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
use Drupal\wmcontent\Entity\WmContentContainer;
use Drupal\wmcontent\Field\IndexableBaseFieldDefinition;

function _wmcontent_update_base_entity(string $entityTypeId, string $provider = 'wmcontent'): void
{
    /* @var EntityFieldManagerInterface $fieldManager */
    $fieldManager = \Drupal::service('entity_field.manager');
    $fieldStorageDefinitions = $fieldManager->getFieldStorageDefinitions($entityTypeId);
    /** @var EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchemaRepository */
    $lastInstalledSchemaRepository = \Drupal::service('entity.last_installed_schema.repository');
    $lastInstalledSchema = $lastInstalledSchemaRepository->getLastInstalledFieldStorageDefinitions($entityTypeId);

    foreach (array_keys($fieldStorageDefinitions) as $field) {
        if (isset($lastInstalledSchema[$field])) {
            Drupal::entityDefinitionUpdateManager()->updateFieldStorageDefinition(
                $fieldStorageDefinitions[$field]
            );
            continue;
        }

        Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition(
            $field,
            $entityTypeId,
            $provider,
            $fieldStorageDefinitions[$field]
        );
    }
}

function wmcontent_install()
{
    // Add our base fields to the schema.
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

function wmcontent_uninstall()
{
    // Remove our base fields from the schema.
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

function wmcontent_update_8001()
{
    foreach (WmContentContainer::loadMultiple() as $container) {
        \Drupal::service('wmcontent.entity_updates')
            ->applyUpdates($container->getChildEntityType());
    }
}

/**
 * Add indexes to the wmcontent_weight, wmcontent_parent,
 * wmcontent_parent_type & wmcontent_container base fields
 */
function wmcontent_update_8002()
{
    $containers = WmContentContainer::loadMultiple();
    $updateManager = \Drupal::entityDefinitionUpdateManager();
    $fieldNames = [
        'wmcontent_weight',
        'wmcontent_parent',
        'wmcontent_parent_type',
        'wmcontent_container',
    ];

    foreach ($containers as $container) {
        foreach ($fieldNames as $fieldName) {
            $storageDefinition = $updateManager->getFieldStorageDefinition(
                $fieldName,
                $container->getChildEntityType()
            );

            if (!$storageDefinition) {
                continue;
            }

            $newDefinition = IndexableBaseFieldDefinition::wrap($storageDefinition)
                ->addIndex('value');
            $updateManager->updateFieldStorageDefinition($newDefinition);
        }
    }
}

/**
 * Fix outdated entity type definitions after adding indexes
 */
function wmcontent_update_8003(array &$sandbox)
{
    $definitionUpdateManager = \Drupal::entityDefinitionUpdateManager();
    /** @var EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchema */
    $lastInstalledSchema = \Drupal::service('entity.last_installed_schema.repository');

    $entityTypeIds = array_map(
        static function (WmContentContainer $container) {
            return $container->getChildEntityType();
        },
        WmContentContainer::loadMultiple()
    );

    foreach (array_unique($entityTypeIds) as $entityTypeId) {
        $entityType = $definitionUpdateManager->getEntityType($entityTypeId);
        $fieldStorageDefinitions = $lastInstalledSchema->getLastInstalledFieldStorageDefinitions($entityTypeId);
        $definitionUpdateManager->updateFieldableEntityType($entityType, $fieldStorageDefinitions, $sandbox);
    }
}

/**
 * Remove old leftover configs
 */
function wmcontent_update_8004()
{
    $config = \Drupal::configFactory();
    $config->getEditable('wmcontent.wmcontentfilters')->delete();
    $config->getEditable('wmcontent.wmcontentmaster')->delete();
    $config->getEditable('wmcontent.wmcontentsettings')->delete();
}

/**
 * Install wmcontent_snapshot entitytype
 */
function wmcontent_update_8005()
{
    \Drupal::entityTypeManager()->clearCachedDefinitions();

    foreach (['wmcontent_snapshot', 'wmcontent_snapshot_log'] as $entityTypeId) {
        $entityType = \Drupal::entityTypeManager()->getDefinition($entityTypeId);

        if (!$entityType) {
            continue;
        }

        \Drupal::entityDefinitionUpdateManager()->installEntityType($entityType);
    }
}

/**
 * Add 'source_langcode' to wmcontent_snapshot entity type
 */
function wmcontent_update_8006()
{
    _wmcontent_update_base_entity('wmcontent_snapshot');
    $entityType = \Drupal::entityTypeManager()->getDefinition('wmcontent_snapshot');

    // Fill the new field with the current langcode.
    // ::setInitialValue('langcode') did not work because "Illegal initial value definition on source_langcode: The field types do not match."
    \Drupal::database()
        ->update($entityType->getBaseTable())
        ->expression('source_langcode', 'langcode')
        ->execute();
}
