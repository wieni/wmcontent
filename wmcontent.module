<?php

/**
 * @file
 * Defines the Wieni Content module.
 *
 * @category module
 *
 * @package Wieni
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\wmcontent\Entity\WmContentContainer;

/**
 * Implements hook_entity_extra_field_info().
 */
function wmcontent_entity_extra_field_info()
{
    $extra = [];

    foreach (wmContentContainer::loadMultiple() as $conf) {
        $config = $conf->getConfig();
        foreach ($config['host_bundles'] as $bundle) {
            $extra[$config['host_entity_type']][$bundle]['display'][$config['id']] = array(
                'label' => 'WmContent: ' . $config['label'],
                'description' => $config['label'],
                'weight' => 0,
                'visible' => true,
            );
        }
    }

    return $extra;
}

/**
 * Implements hook_entity_type_alter().
 *
 * This is very necesarry to provide us with the correct content translation
 * language (adds the language_content_entity query string when needed.
 *
 * TODO: Ideally we only add this on the enabled entity types/bundles
 * but if we load wmContentContainer::loadMultiple() then we end up looping.
 *
 * @see \Drupal\Core\Entity\Annotation\EntityType
 */
function wmcontent_entity_type_alter(array &$entity_types)
{
    // Provide defaults for translation info.
    /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
    foreach ($entity_types as $entity_type) {
        if ($entity_type->hasLinkTemplate('canonical')) {
            // Provide default route names for the wmcontent paths.
            if (!$entity_type->hasLinkTemplate('drupal:wmcontent-overview')) {
                // This breaks on taxonomy terms.
                if ($entity_type->id() == 'node') {
                    $wmcontent_path = $entity_type->getLinkTemplate('canonical') . '/content/{container}';
                    $entity_type->setLinkTemplate(
                        'drupal:wmcontent-overview',
                        $wmcontent_path
                    );
                }

                // I leave this in because it's ultimately what I'ld like to accomplish, however I found no
                // currently to add link templates with parameters that aren't default...
                //$wmcontent_path = $entity_type->getLinkTemplate('canonical') . '/content/{container}/add/{bundle}';
                //$entity_type->setLinkTemplate(
                //    'drupal:wmcontent-overview',
                //    $wmcontent_path
                //);
                //
                //$wmcontent_path = $entity_type->getLinkTemplate('canonical') . '/content/{container}/{child_id}/edit';
                //$entity_type->setLinkTemplate(
                //    'drupal:wmcontent-overview',
                //    $wmcontent_path
                //);
                //
                //$wmcontent_path = $entity_type->getLinkTemplate('canonical') . '/content/{container}/{child_id}/delete';
                //$entity_type->setLinkTemplate(
                //    'drupal:wmcontent-overview',
                //    $wmcontent_path
                //);
            }
        }
    }
}

/**
 * Implements hook_entity_operation().
 */
function wmcontent_entity_operation(EntityInterface $entity)
{
    $operations = [];

    foreach (WmContentContainer::loadMultiple() as $conf) {
        $config = $conf->getConfig();

        if ($config['host_entity_type'] == $entity->getEntityType()->id()) {
            if (empty($config['host_bundles']) || in_array($entity->bundle(), $config['host_bundles'])) {
                $url = Url::fromRoute(
                    'entity.' . $entity->getEntityType()->id() . '.wmcontent_overview',
                    [
                        $entity->getEntityType()->id() => $entity->id(),
                        'container' => $config['id'],
                    ]
                );

                $operations[$config['id']] = array(
                    'title' => $config['label'],
                    'url' => $url,
                    'weight' => 50,
                );
            }
        }
    }

    return $operations;
}

/**
 * Implements hook_entity_insert().
 */
function wmcontent_entity_insert(EntityInterface $entity)
{
    _wmcontent_containersave_cacheclear($entity);
}

/**
 * Implements hook_entity_update().
 */
function wmcontent_entity_update(EntityInterface $entity)
{
    _wmcontent_containersave_cacheclear($entity);
}

/**
 * Implements hook_entity_view().
 */
function wmcontent_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{

    // Loadup our config.
    foreach (wmContentContainer::loadMultiple() as $container) {
        // Only load if our container is enabled in the display.
        if ($display->getComponent($container->getId())) {
            // Load up our service and get the content, ordered by weight.
            $manager = \Drupal::service('wmcontent.manager');
            $entities = $manager->getContent(
                $entity,
                $container->getId()
            );

            $delta = 0;
            $paragraph_type_count = 1;
            $paragraph_type_last = false;
            $sections = [
                $delta => [
                    '#theme' => 'wmcontent_section',
                    '#background' => '',
                    '#items' => [],
                    '#delta' => $delta,
                    '#container' => $container->getId(),
                ],
            ];

            foreach ($entities as $content) {
                // If this is a 'break' then add it to the higher level break and switch.
                if ($content->bundle() == 'break') {
                    $background = '';
                    if ($content->get('break_background')->value) {
                        $background = $content->get('break_background')->value;
                    }

                    $delta++;
                    $sections[$delta] = [
                        '#theme' => 'wmcontent_section',
                        '#background' => $background,
                        '#items' => [],
                        '#delta' => $delta,
                    ];

                    // Reset the paragraph type count coz we're starting a new
                    // section.
                    $paragraph_type_count = 1;
                    $paragraph_type_last = false;
                } else {
                    // If it's not a break, just add this paragraph.
                    // Do look at the type tough.
                    if ($content->bundle() != $paragraph_type_last) {
                        $paragraph_type_count = 1;
                        $paragraph_type_last = $content->bundle();
                    }
                    $item = entity_view($content, 'full');
                    $item['#weight'] = $content->get('wmcontent_weight')->getString();
                    $item['#size'] = $content->get('wmcontent_size')->getString();
                    $item['#alignment'] = $content->get('wmcontent_alignment')->getString();
                    $item['#delta'] = $paragraph_type_count;
                    $item['#type'] = $content->getEntityTypeId();
                    $item['#bundle'] = $content->bundle();


                    $sections[$delta]['#items'][] = $item;
                    $paragraph_type_count++;
                }
            }


            // Fetch empty ones (mainly, the first one).
            foreach ($sections as $delta => $section) {
                if (empty($section['#items'])) {
                    unset($sections[$delta]);
                }
            }

            $build['wmcontent'][$container->getId()] = array(
                '#sections' => $sections,
                '#theme' => 'wmcontent',
                '#container' => $container->getId(),
            );
        }
    }
}

/**
 * Implements hook_theme().
 */
function wmcontent_theme($existing, $type, $theme, $path)
{
    return [
        'wmcontent' => [
            'variables' => [
                'sections' => null,
                'container' => null,
            ],
        ],
        'wmcontent_section' => [
            'variables' => [
                'items' => null,
                'background' => null,
                'delta' => null,
                'container' => null,
            ],
        ],
        'paragraph' => [
            'render element' => 'elements',
        ],
        'items' => [
            'render element' => 'elements',
        ],
        // Cards is used to explode 1 paragraph into multiple 'fake'
        // paragraphs on the frontend. Bv voor autofill paragraph types.
        'paragraph_cards' => [
            'variables' => [
                'cards' => null,
                'size' => null,
                'alignment' => null,
                'type' => null,
            ],
        ],
    ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function wmcontent_theme_suggestions_eck_entity(array $variables)
{
    $suggestions = [];
    
    // Add theme suggestiongs for the type and the the type__bundle.
    if (!empty($variables['entity']) && isset($variables['entity']['#entity_type'])) {
        $suggestions = [
            $variables['entity']['#entity_type'],
            $variables['entity']['#entity_type'] . '__' . $variables['entity']['#entity']->bundle(),
        ];
    }

    return $suggestions;
}

/**
 * Prepares variables for paragraph templates.
 */
function wmcontent_preprocess_paragraph(&$variables)
{
    $paragraph = $variables['entity']['#entity'];

    $variables['bundle'] = $paragraph->bundle();

    // Add size.
    $size = $paragraph->get('wmcontent_size')->value;
    if (strlen($size) > 0) {
        $variables['wmcontent_size'] = $size;
    }

    $alignment = $paragraph->get('wmcontent_alignment')->value;
    if (strlen($size) > 0) {
        $variables['wmcontent_alignment'] = $alignment;
    }

    // Add delta.
    $variables['wmcontent_delta'] = 0;
    if (isset($variables['entity']['#delta'])) {
        $variables['wmcontent_delta'] = (string) $variables['entity']['#delta'];
    }

    $strip = [
        'created',
        'wmcontent_size',
        'wmcontent_alignment',
        'wmcontent_weight',
        'wmcontent_parent',
    ];

    // Add to render array except size.
    $variables['content'] = [];
    foreach (Element::children($variables['entity']) as $key) {
        if (!empty($variables['entity'][$key]['#field_name'])
            && !in_array($variables['entity'][$key]['#field_name'], $strip)
            ) {
            $variables['content'][] = $variables['entity'][$key];
        }
    }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * More intel at https://www.drupal.org/node/1879542
 */
function wmcontent_entity_base_field_info(EntityTypeInterface $entity_type)
{
    $fields = array();
    foreach (wmContentContainer::loadMultiple() as $conf) {
        // Match. This is kind of wrong because we're going to overload all
        // the bundles of the entity type with our fields.
        if ($entity_type->id() == $conf->getChildEntityType()) {
            $fields['wmcontent_size'] = BaseFieldDefinition::create('list_string')
                ->setLabel(t('Size'))
                ->setDescription(t('Select the size.'))
                ->setRequired(true)
                ->setSetting('allowed_values', _wmcontent_sizes())
                ->setSetting('default_value', 'full')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'options_select',
                        'settings' => array(
                           'display_label' => true,
                            ),
                        'weight' => 20,
                        )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_alignment'] = BaseFieldDefinition::create('list_string')
                ->setLabel(t('Alignment'))
                ->setDescription(t('Select the Alignment.'))
                ->setRequired(true)
                ->setSetting('allowed_values', _wmcontent_alignments())
                ->setSetting('default_value', 'left')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'options_select',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_weight'] = BaseFieldDefinition::create('integer')
                ->setLabel(t('Weight'))
                ->setRequired(true)
                ->setSetting('default_value', 0)
                ->setDescription(t('The weight of this child.'))
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                    'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            // The parent is an entity reference to the parent entity, which allows
            // to access the parent id with $entity->parent->target_id and the parent
            // entity with $entity->parent->entity.
            $fields['wmcontent_parent'] = BaseFieldDefinition::create('integer')
                ->setLabel(t('Host'))
                ->setDescription(t('The entity id of the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                )
                ->setDisplayOptions(
                    'view',
                    array(
                        'label' => 'hidden',
                        'type' => 'string',
                        'weight' => -5,
                    )
                );

            $fields['wmcontent_parent_type'] = BaseFieldDefinition::create('string')
                ->setLabel(t('Host Type'))
                ->setDescription(t('The entity type of the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                        'type' => 'hidden',
                        'settings' => array(
                            'display_label' => true,
                        ),
                        'weight' => 20,
                    )
                );

            $fields['wmcontent_container'] = BaseFieldDefinition::create('string')
                ->setLabel(t('Container'))
                ->setDescription(t('The container in the host.'))
                ->setRequired(true)
                ->setReadOnly(true)
                ->setSetting('default_value', 'content')
                ->setDisplayConfigurable('form', true)
                ->setDisplayOptions(
                    'form',
                    array(
                    'type' => 'hidden',
                    'settings' => array(
                        'display_label' => true,
                    ),
                      'weight' => 20,
                    )
                );
        }
    }

    return $fields;
}

/**
 * Default list of available sizes.
 */
function _wmcontent_sizes()
{
    return [
        'small' => t('Small'),
        'medium' => t('Medium'),
        'large' => t('Large'),
        'full' => t('Full'),
    ];
}

/**
 * Default list of available sizes.
 */
function _wmcontent_alignments()
{
    return [
        'left' => t('Left'),
        'right' => t('Right'),
        'justified' => t('Justified'),
    ];
}

/**
 * Checks if a given entity's type is registered as a child entity type somewhere,
 * and clear the host cache if it is.
 */
function _wmcontent_containersave_cacheclear(Drupal\Core\Entity\EntityInterface $entity)
{
    $clearParent = false;

    // Load up our service clear cache for the host.
    $manager = \Drupal::service('wmcontent.manager');
    // $entities = $manager->hostClearCache($p);
    foreach (wmContentContainer::loadMultiple() as $conf) {
        $config = $conf->getConfig();
        if ($config['child_entity_type'] == $entity->getEntityType()->id()) {
            if (empty($config['child_bundles']) || in_array($entity->bundle(), $config['child_bundles'])) {
                $clearParent = true;
            }
        }
    }

    if ($clearParent) {
        // Clear Drupals cache for the parent entity.
        $manager->hostClearCache($entity);
    }
}

/**
 * Implements hook_form_alter().
 */
function wmcontent_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    // Go through all the containers.
    foreach (wmContentContainer::loadMultiple() as $conf) {
        // Get the config.
        $config = $conf->getConfig();

        // Establish entity type.
        $type = $config['child_entity_type'];

        // Go through the bundles.
        foreach ($config['child_bundles'] as $bundle) {
            // Build up what the form id for this child would be.
            $test = $config['child_entity_type'] . "_" . $bundle . "_form";

            // Sweet baby jesus we got a child entity form.
            if ($test == $form_id) {
                // What do other modules have to say about the sizes.
                $sizes = \Drupal::moduleHandler()->invokeAll('wmcontent_sizes_alter', [$type, $bundle]);
                $alignments = \Drupal::moduleHandler()->invokeAll('wmcontent_alignments_alter', [$type, $bundle]);

                // Ok did we have some sizes?
                if (count($sizes) > 0) {
                    // Alter the form.
                    $form['wmcontent_size']['widget']['#options'] = $sizes;
                }

                // Did we have some alignments.
                if (count($alignments) > 0) {
                    // Alter the form.
                    $form['wmcontent_alignment']['widget']['#options'] = $alignments;
                }
            }
        }
    }
}
