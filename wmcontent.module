<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\wmcontent\Entity\Snapshot;
use Drupal\wmcontent\Entity\WmContentContainer;
use Drupal\wmcontent\Event\ContentBlockChangedEvent;
use Drupal\wmcontent\Field\IndexableBaseFieldDefinition;
use Drupal\wmcontent\WmContentContainerInterface;
use Drupal\wmcontent\WmContentManagerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

function wmcontent_entity_extra_field_info(): array
{
    $extra = [];
    /** @var WmContentManagerInterface $manager */
    $manager = \Drupal::service('wmcontent.manager');

    foreach ($manager->getContainers() as $container) {
        foreach ($container->getHostBundles() as $bundle) {
            $extra[$container->getHostEntityType()][$bundle]['display']['wmc_' . $container->id()] = [
                'label' => 'WmContent: ' . $container->label(),
                'description' => $container->label(),
                'weight' => 0,
                'visible' => true,
            ];
        }
    }

    return $extra;
}

/**
 * This is very necessary to provide us with the correct content translation
 * language (adds the language_content_entity query string when needed.
 *
 * Ideally we only add this on the enabled entity types/bundles
 * but if we call WmContentContainer::loadMultiple() then we end up looping.
 *
 * @param array EntityTypeInterface[] $entityTypes
 */
function wmcontent_entity_type_alter(array &$entityTypes): void
{
    foreach ($entityTypes as $entityType) {
        if (!$entityType instanceof ContentEntityTypeInterface) {
            continue;
        }

        if (!$entityType->hasLinkTemplate('canonical')) {
            continue;
        }

        if ($entityType->hasLinkTemplate('drupal:wmcontent-overview')) {
            continue;
        }

        $entityType->setLinkTemplate(
            'drupal:wmcontent-overview',
            $entityType->getLinkTemplate('canonical') . '/wmcontent/{container}'
        );
    }
}

function wmcontent_entity_operation_alter(array &$operations, EntityInterface $entity)
{
    foreach ($operations as &$operation) {
        /** @var Url $url */
        $url = $operation['url'] ?? null;
        if (!$url) {
            continue;
        }
        $queryOption = $url->getOption('query') ?: [];
        if (empty($queryOption['destination'])) {
            continue;
        }
        $uri = parse_url($queryOption['destination']);
        if (empty($uri['query'])) {
            continue;
        }
        $query = [];
        parse_str($uri['query'], $query);
        unset($query[MainContentViewSubscriber::WRAPPER_FORMAT]);
        $uri['query'] = http_build_query($query);
        if (empty($uri['query'])) {
            unset($uri['query']);
        }
        $queryOption['destination'] = _wmcontent_unparse_url($uri);
        $url->setOption('query', $queryOption);
    }
}

function wmcontent_entity_operation(EntityInterface $entity): array
{
    if ($entity instanceof Snapshot) {
        return \Drupal::getContainer()->get('wmcontent.snapshot')->getEntityOperations(
            $entity,
            \Drupal::getContainer()->get('current_route_match')
        );
    }

    if (!$entity instanceof ContentEntityInterface) {
        return [];
    }

    if (!$entity->access('update')) {
        return [];
    }

    $operations = [];
    $containers = \Drupal::service('wmcontent.manager')->getHostContainers($entity);
    $routeName = 'entity.' . $entity->getEntityTypeId() . '.wmcontent_overview';

    /** @var WmContentContainerInterface $container */
    foreach ($containers as $container) {
        $operations[$container->id()] = [
            'title' => $container->label(),
            'url' => Url::fromRoute(
                $routeName,
                [
                    $entity->getEntityTypeId() => $entity->id(),
                    'container' => $container->id(),
                ],
                [
                    'language' => $entity->language(),
                ]
            ),
            'weight' => 50,
        ];
    }

    return $operations;
}

function wmcontent_entity_update(EntityInterface $entity): void
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }

    /** @var EventDispatcherInterface $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    /** @var WmContentManagerInterface $manager */
    $manager = \Drupal::service('wmcontent.manager');

    if ($manager->isChild($entity)) {
        $dispatcher->dispatch(
            new ContentBlockChangedEvent($entity, $manager->getChildContainers($entity)),
            ContentBlockChangedEvent::NAME
        );
    }
}

function wmcontent_entity_insert(EntityInterface $entity): void
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }

    /** @var EventDispatcherInterface $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    /** @var WmContentManagerInterface $manager */
    $manager = \Drupal::service('wmcontent.manager');

    if ($manager->isChild($entity)) {
        $dispatcher->dispatch(
            new ContentBlockChangedEvent($entity, $manager->getChildContainers($entity)),
            ContentBlockChangedEvent::NAME
        );
    }
}

function wmcontent_entity_delete(EntityInterface $entity): void
{
    if (!$entity instanceof ContentEntityInterface) {
        return;
    }

    /** @var EventDispatcherInterface $dispatcher */
    $dispatcher = \Drupal::service('event_dispatcher');
    /** @var WmContentManagerInterface $manager */
    $manager = \Drupal::service('wmcontent.manager');

    if ($manager->isChild($entity)) {
        $dispatcher->dispatch(
            new ContentBlockChangedEvent($entity, $manager->getChildContainers($entity)),
            ContentBlockChangedEvent::NAME
        );
    }
}

function wmcontent_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display): void
{
    foreach (WmContentContainer::loadMultiple() as $container) {
        // Only load if our container is enabled in the display.
        if (!$display->getComponent('wmc_' . $container->getId())) {
            continue;
        }

        $viewBuilder = \Drupal::entityTypeManager()
            ->getViewBuilder($entity->getEntityTypeId());

        $children = array_map(
            function (ContentEntityInterface $entity) use ($viewBuilder) {
                $item = $viewBuilder->view($entity);
                $item['#weight'] = $entity->get('wmcontent_weight')->getString();
                $item['#size'] = $entity->get('wmcontent_size')->getString();
                $item['#alignment'] = $entity->get('wmcontent_alignment')->getString();
                $item['#type'] = $entity->getEntityTypeId();
                $item['#bundle'] = $entity->bundle();

                return $item;
            },
            \Drupal::service('wmcontent.manager')
                ->getContent($entity, $container->getId())
        );

        $build['wmc_' . $container->getId()] = [
            '#children' => $children,
            '#theme' => 'wmcontent',
            '#container' => $container->getId(),
        ];
    }
}

function wmcontent_theme(): array
{
    return [
        'wmcontent' => [
            'variables' => [
                'children' => null,
                'container' => null,
            ],
        ],
    ];
}

function wmcontent_entity_base_field_info(EntityTypeInterface $entity_type): array
{
    $fields = [];

    foreach (WmContentContainer::loadMultiple() as $conf) {
        // Match. This is kind of wrong because we're going to overload all
        // the bundles of the entity type with our fields.
        if ($entity_type->id() !== $conf->getChildEntityType()) {
            continue;
        }

        $fields['wmcontent_size'] = BaseFieldDefinition::create('list_string')
            ->setLabel(t('Size'))
            ->setRequired(true)
            ->setSetting('allowed_values_function', '_wmcontent_sizes')
            ->setDefaultValueCallback('_wmcontent_default_size')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'options_select',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            );

        $fields['wmcontent_alignment'] = BaseFieldDefinition::create('list_string')
            ->setLabel(t('Alignment'))
            ->setRequired(true)
            ->setSetting('allowed_values_function', '_wmcontent_alignments')
            ->setDefaultValueCallback('_wmcontent_default_alignment')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'options_select',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            );

        $fields['wmcontent_weight'] = IndexableBaseFieldDefinition::create('integer')
            ->setLabel(t('Weight'))
            ->setRequired(true)
            ->setSetting('default_value', 0)
            ->setDescription(t('The weight of this child.'))
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            )
            ->addIndex('value');

        // The parent is an entity reference to the parent entity, which allows
        // to access the parent id with $entity->parent->target_id and the parent
        // entity with $entity->parent->entity.
        $fields['wmcontent_parent'] = IndexableBaseFieldDefinition::create('integer')
            ->setLabel(t('Host'))
            ->setDescription(t('The id of the host entity.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->setDisplayOptions(
                'view',
                [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ]
            )
            ->addIndex('value');

        $fields['wmcontent_parent_type'] = IndexableBaseFieldDefinition::create('string')
            ->setLabel(t('Host Type'))
            ->setDescription(t('The type of the host entity.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->addIndex('value');

        $fields['wmcontent_container'] = IndexableBaseFieldDefinition::create('string')
            ->setLabel(t('Container'))
            ->setDescription(t('The container this child is attached to.'))
            ->setRequired(true)
            ->setReadOnly(true)
            ->setSetting('default_value', 'content')
            ->setDisplayConfigurable('form', true)
            ->setDisplayOptions(
                'form',
                [
                    'type' => 'hidden',
                    'settings' => [
                        'display_label' => true,
                    ],
                    'weight' => 20,
                ]
            )
            ->addIndex('value');
    }

    return $fields;
}

function _wmcontent_sizes(?FieldStorageDefinitionInterface $definition = null, ?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'small' => t('Small'),
        'medium' => t('Medium'),
        'large' => t('Large'),
        'full' => t('Full'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $sizes = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_sizes_alter', [$type, $bundle, $defaults]);

    if (empty($sizes)) {
        return $defaults;
    }

    return $sizes;
}

function _wmcontent_default_size(?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $default = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_size_alter', [$type, $bundle]);

    $first = array_keys(_wmcontent_sizes(null, $entity))[0] ?? null;

    return $default ?? $first;
}

function _wmcontent_alignments(?FieldStorageDefinitionInterface $definition = null, ?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    $defaults = [
        'left' => t('Left'),
        'right' => t('Right'),
        'justified' => t('Justified'),
    ];

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $alignments = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_alignments_alter', [$type, $bundle, $defaults]);

    if (empty($alignments)) {
        return $defaults;
    }

    return $alignments;
}

function _wmcontent_default_alignment(?FieldableEntityInterface $entity = null)
{
    $bundle = null;
    $type = null;

    if ($entity instanceof FieldableEntityInterface) {
        $bundle = $entity->bundle();
        $type = $entity->getEntityTypeId();
    }

    $default = \Drupal::moduleHandler()
        ->invokeAll('wmcontent_default_alignment_alter', [$type, $bundle]);

    $first = array_keys(_wmcontent_alignments(null, $entity))[0] ?? null;

    return $default ?? $first;
}

function wmcontent_form_alter(array &$form, FormStateInterface $formState, string $formId)
{
    /** @var WmContentContainerInterface $entity */
    foreach (WmContentContainer::loadMultiple() as $entity) {
        $config = $entity->getConfig();

        foreach ($config['child_bundles'] as $bundle) {
            if ($formId !== $config['child_entity_type'] . '_' . $bundle . '_form') {
                continue;
            }

            if (
                $config['hide_single_option_sizes']
                && isset($form['wmcontent_size']['widget']['#options'])
                && count($form['wmcontent_size']['widget']['#options']) === 1
            ) {
                $form['wmcontent_size']['#access'] = false;
            }

            if (
                $config['hide_single_option_alignments']
                && isset($form['wmcontent_alignment']['widget']['#options'])
                && count($form['wmcontent_alignment']['widget']['#options']) === 1
            ) {
                $form['wmcontent_alignment']['#access'] = false;
            }
        }
    }
}

/**
 * Alter pagination urls to ajax urls when they are rendered in a Modal
 */
function wmcontent_preprocess_pager(&$variables)
{
    $request = \Drupal::request();
    if (
        !$request
        || !isset($variables['items']['pages'])
        || $request->query->get(MainContentViewSubscriber::WRAPPER_FORMAT) !== 'drupal_modal'
    ) {
        // Not a modal request or no items being rendered. So bail early
        return;
    }

    $turnIntoModalUrl = static function (&$item) use (&$request) {
        // Remove ?_wrapper_format=modal from the pagination urls.
        // If they are kept in Drupal does weird things like wrapping it's ajax
        // response with a <textarea>
        $query = [];
        parse_str(trim($item['href'], '?'), $query);
        unset($query[MainContentViewSubscriber::WRAPPER_FORMAT]);

        // Instead of having a relative ?page=0 we have to add the location.
        // This is because in the browser the current location is the page
        // the modal is triggered from.
        // Eg if you're on /admin/content and you click on /node/5/overview
        // that opens in a modal and contains pager links. If we'd render those
        // pager links with '?page=0' the browser would call /admin/content?page=0
        // instead of /node/5/overview?page=0 when clicked.
        //
        // So use the current request to create a non-relative url.
        $item['href'] = Url::createFromRequest($request)
            ->mergeOptions(['query' => $query])
            ->toString(true)->getGeneratedUrl();

        // Have the urls open in a modal.
        /** @var \Drupal\Core\Template\Attribute $attribute */
        $attribute = $item['attributes'];
        $attribute->addClass('use-ajax');
        $attribute->setAttribute('data-dialog-type', 'modal');
        $attribute->setAttribute(
            'data-dialog-options',
            // Use the dialog options that were used to display the current modal
            json_encode($request->request->get('dialogOptions', []), JSON_THROW_ON_ERROR)
        );
    };

    foreach ($variables['items']['pages'] as &$item) {
        $turnIntoModalUrl($item);
    }
    unset($item);

    foreach (['first', 'previous', 'next', 'last'] as $name) {
        if (!empty($variables['items'][$name])) {
            $turnIntoModalUrl($variables['items'][$name]);
        }
    }
}

function wmcontent_template_preprocess_default_variables_alter(&$variables)
{
    $is_inline_render = \Drupal::request()->query->get('wmcontent_inline_render', 'false');
    $currentUser = \Drupal::currentUser();
    if ($currentUser->hasPermission('view wmcontent inline render')) {
        $variables['wmcontent_is_inline_render'] = filter_var($is_inline_render, FILTER_VALIDATE_BOOLEAN);
    }
}

function wmcontent_page_top(array &$page_top)
{
    $is_inline_render = \Drupal::request()->query->get('wmcontent_inline_render', 'false');
    $currentUser = \Drupal::currentUser();
    if (
        filter_var($is_inline_render, FILTER_VALIDATE_BOOLEAN)
        && $currentUser->hasPermission('view wmcontent inline render')
    ) {
        // if toolbar exists, remove it
        if (isset($page_top['toolbar'])) {
            unset($page_top['toolbar']);
        }
    }
}

/**
 * Implements hook_page_attachments_alter().
 */
function wmcontent_page_attachments_alter(array &$attachments)
{
    $is_inline_render = \Drupal::request()->query->get('wmcontent_inline_render', 'false');
    $currentUser = \Drupal::currentUser();
    if (
        filter_var($is_inline_render, FILTER_VALIDATE_BOOLEAN)
        && $currentUser->hasPermission('view wmcontent inline render')
    ) {
        // remove gin attachments
        $oldLibraries = $attachments['#attached']['library'] ?? [];
        $newLibraries = [];
        foreach ($oldLibraries as $lib) {
            if (strpos($lib, 'gin') === false) {
                $newLibraries[] = $lib;
            }
        }
        $attachments['#attached']['library'] = $newLibraries;
    }
}

function _wmcontent_unparse_url($parsed_url)
{
    $scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
    $host = $parsed_url['host'] ?? '';
    $port = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
    $user = $parsed_url['user'] ?? '';
    $pass = isset($parsed_url['pass']) ? ':' . $parsed_url['pass'] : '';
    $pass = ($user || $pass) ? "$pass@" : '';
    $path = $parsed_url['path'] ?? '';
    $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
    $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
    return $scheme . $user . $pass . $host . $port . $path . $query . $fragment;
}
